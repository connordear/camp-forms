services:
  api:
    build:
      context: ./apps/api/server # Path relative to the root
      dockerfile: Dockerfile
      target: development # Example target stage
    environment:
      - SERVER_PORT=8080
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    restart: always
    environment:
      PGUSER: $DB_USER
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
    ports:
      - 5433:5432
    volumes:
      - db-data:/var/lib/postgresql/data # Persistent volume
      - ./db:/docker-entrypoint-initdb.d # init scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10

  pgadmin:
    container_name: pgadmin
    user: root
    attach: false
    image: dpage/pgadmin4:latest
    entrypoint: /bin/sh -c "chmod 600 /pgpass; /entrypoint.sh;"
    environment:
      - PGADMIN_DEFAULT_EMAIL=$PGADMIN_MAIL 
      - PGADMIN_DEFAULT_PASSWORD=$PGADMIN_PW
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    restart: always
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
      - source: pgpass
        target: /pgpass

 # frontend:
 #   build:
 #     context: ./apps/frontend # Path relative to the root
 #     dockerfile: Dockerfile
 #     target: development # Example target stage
#

configs:
  pgpass:
    content: db:5432:*:postgres:postgres
  servers.json:
    content: |
      {"Servers": {"1": {
        "Group": "Servers",
        "Name": "My Local Postgres 16.1",
        "Host": "db",
        "Port": 5432,
        "MaintenanceDB": "postgres",
        "Username": "postgres",
        "PassFile": "/pgpass",
        "SSLMode": "prefer"
      }}}

volumes:
  db-init:
  db-data:
